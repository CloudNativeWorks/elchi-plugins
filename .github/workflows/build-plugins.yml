name: Build and Push Plugin Images

on:
  workflow_dispatch:
    inputs:
      plugins:
        description: 'Plugin names (comma separated, or "all" for all plugins)'
        required: true
        default: 'all'
        type: string
      platforms:
        description: 'Target platforms (comma separated)'
        required: true
        default: 'linux/amd64,linux/arm64'
        type: string

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_REGISTRY: docker.io

jobs:
  discover-plugins:
    runs-on: ubuntu-22.04
    outputs:
      plugins: ${{ steps.discover.outputs.plugins }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Discover plugins
        id: discover
        run: |
          if [ "${{ github.event.inputs.plugins }}" = "all" ]; then
            # Find all plugin directories (exclude pkg)
            plugins=$(find . -maxdepth 1 -type d -name "elchi-*" | sed 's|./||' | jq -R -s -c 'split("\n")[:-1]')
          else
            # Use provided plugin list
            plugins=$(echo "${{ github.event.inputs.plugins }}" | tr ',' '\n' | jq -R -s -c 'split("\n")[:-1]')
          fi
          echo "plugins=${plugins}" >> $GITHUB_OUTPUT
          echo "Discovered plugins: ${plugins}"

  build-amd64:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    needs: discover-plugins
    if: contains(github.event.inputs.platforms, 'linux/amd64')
    strategy:
      matrix:
        plugin: ${{ fromJSON(needs.discover-plugins.outputs.plugins) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Project Version
        run: echo "PROJECT_VERSION=$(cat VERSION)" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push AMD64 image
        env:
          DOCKER_BUILDKIT: 1
          PLUGIN_NAME: ${{ matrix.plugin }}
        run: |
          echo "Building plugin: ${PLUGIN_NAME} (AMD64)"
          
          # Set image tags
          IMAGE_NAME="${DOCKER_USERNAME}/${PLUGIN_NAME}"
          IMAGE_TAG="${IMAGE_NAME}:v${PROJECT_VERSION}-amd64"
          
          # Build AMD64 platform
          docker buildx build \
            --no-cache \
            --platform linux/amd64 \
            --build-arg "PLUGIN_NAME=${PLUGIN_NAME}" \
            --build-arg "PROJECT_VERSION=${PROJECT_VERSION}" \
            -t "${IMAGE_TAG}" \
            -f Dockerfile \
            --load \
            .
          
          # Push AMD64 image
          docker push "${IMAGE_TAG}"
          
          echo "✅ Plugin ${PLUGIN_NAME} (AMD64) completed"

  build-arm64:
    runs-on: self-hosted
    timeout-minutes: 60
    needs: discover-plugins
    if: contains(github.event.inputs.platforms, 'linux/arm64')
    strategy:
      matrix:
        plugin: ${{ fromJSON(needs.discover-plugins.outputs.plugins) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Project Version
        run: echo "PROJECT_VERSION=$(cat VERSION)" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push ARM64 image
        env:
          DOCKER_BUILDKIT: 1
          PLUGIN_NAME: ${{ matrix.plugin }}
        run: |
          echo "Building plugin: ${PLUGIN_NAME} (ARM64)"
          
          # Set image tags
          IMAGE_NAME="${DOCKER_USERNAME}/${PLUGIN_NAME}"
          IMAGE_TAG="${IMAGE_NAME}:v${PROJECT_VERSION}-arm64"
          
          # Build ARM64 platform
          docker buildx build \
            --no-cache \
            --platform linux/arm64 \
            --build-arg "PLUGIN_NAME=${PLUGIN_NAME}" \
            --build-arg "PROJECT_VERSION=${PROJECT_VERSION}" \
            -t "${IMAGE_TAG}" \
            -f Dockerfile \
            --load \
            .
          
          # Push ARM64 image
          docker push "${IMAGE_TAG}"
          
          echo "✅ Plugin ${PLUGIN_NAME} (ARM64) completed"

  create-manifest:
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    needs: [discover-plugins, build-amd64, build-arm64]
    if: contains(github.event.inputs.platforms, ',')
    strategy:
      matrix:
        plugin: ${{ fromJSON(needs.discover-plugins.outputs.plugins) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Project Version
        run: echo "PROJECT_VERSION=$(cat VERSION)" >> $GITHUB_ENV

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Create multi-platform manifest
        env:
          PLUGIN_NAME: ${{ matrix.plugin }}
        run: |
          echo "Creating manifest for plugin: ${PLUGIN_NAME}"
          
          # Set image names
          IMAGE_NAME="${DOCKER_USERNAME}/${PLUGIN_NAME}"
          MANIFEST_TAG="${IMAGE_NAME}:v${PROJECT_VERSION}"
          LATEST_TAG="${IMAGE_NAME}:latest"
          
          # Create manifest list from platform-specific images
          docker manifest create "${MANIFEST_TAG}" \
            "${IMAGE_NAME}:v${PROJECT_VERSION}-amd64" \
            "${IMAGE_NAME}:v${PROJECT_VERSION}-arm64"
          
          # Push manifest
          docker manifest push "${MANIFEST_TAG}"
          
          # Create latest manifest
          docker manifest create "${LATEST_TAG}" \
            "${IMAGE_NAME}:v${PROJECT_VERSION}-amd64" \
            "${IMAGE_NAME}:v${PROJECT_VERSION}-arm64"
          
          docker manifest push "${LATEST_TAG}"
          
          echo "✅ Manifest created for ${PLUGIN_NAME}"